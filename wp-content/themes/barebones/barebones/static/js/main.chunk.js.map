{"version":3,"sources":["pages/NotFound/index.jsx","pages/Home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["NoMatch","React","createElement","Link","to","Home","App","Routes","Route","path","element","Layout","index","About","Outlet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LAgBeA,MAZf,WACE,OACEC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,SAAG,2DACHD,IAAAC,cAAA,SACED,IAAAC,cAACC,IAAI,CAACC,GAAG,KAAI,uCCANC,MARf,WACE,OACEJ,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,UCEK,SAASI,IACtB,OACEL,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,iBAEJD,IAAAC,cAAA,SAAG,wFAEgBD,IAAAC,cAAA,YAAM,WAAoB,KAAG,IAC9CD,IAAAC,cAAA,YAAM,YAAqB,MAAGD,IAAAC,cAAA,YAAM,UAAmB,sHASzDD,IAAAC,cAACK,IAAM,KACLN,IAAAC,cAACM,IAAK,CAACC,KAAK,IAAIC,QAAST,IAAAC,cAACS,EAAM,OAC9BV,IAAAC,cAACM,IAAK,CAACI,OAAK,EAACF,QAAST,IAAAC,cAACG,EAAI,QAC3BJ,IAAAC,cAACM,IAAK,CAACC,KAAK,QAAQC,QAAST,IAAAC,cAACW,EAAK,QAKnCZ,IAAAC,cAACM,IAAK,CAACC,KAAK,IAAIC,QAAST,IAAAC,cAACF,EAAO,WAO3C,SAASW,IACP,OACEV,IAAAC,cAAA,WAGED,IAAAC,cAAA,WACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UACED,IAAAC,cAACC,IAAI,CAACC,GAAG,KAAI,SAEfH,IAAAC,cAAA,UACED,IAAAC,cAACC,IAAI,CAACC,GAAG,SAAQ,YAMvBH,IAAAC,cAAA,WAKAD,IAAAC,cAACY,IAAM,OAKb,SAASD,IACP,OACEZ,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,UCzDUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPpB,IAAAC,cAACD,IAAMqB,WAAU,KACbrB,IAAAC,cAACqB,IAAa,KAChBtB,IAAAC,cAACI,EAAG,QAGNkB,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMC,IACLC,QAAQD,MAAMA,EAAME,Y","file":"static/js/main.chunk.js","sourcesContent":["\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction NoMatch() {\n  return (\n    <div>\n      <h2>Page non trouvée</h2>\n      <p>Désolé, la page que vous recherchez n'existe pas.</p>\n      <p>\n        <Link to=\"/\">Retourner à la page d'accueil</Link>\n      </p>\n    </div>\n  );\n}\n\nexport default NoMatch;\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { Routes, Route, Outlet, Link } from \"react-router-dom\";\n\nimport NoMatch from \"./pages/NotFound\";\nimport Home from \"./pages/Home\";\n\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Basic Example</h1>\n\n      <p>\n        This example demonstrates some of the core features of React Router\n        including nested <code>&lt;Route&gt;</code>s,{\" \"}\n        <code>&lt;Outlet&gt;</code>s, <code>&lt;Link&gt;</code>s, and using a\n        \"*\" route (aka \"splat route\") to render a \"not found\" page when someone\n        visits an unrecognized URL.\n      </p>\n\n      {/* Routes nest inside one another. Nested route paths build upon\n            parent route paths, and nested route elements render inside\n            parent route elements. See the note about <Outlet> below. */}\n      \n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"about\" element={<About />} />\n\n          {/* Using path=\"*\"\" means \"match anything\", so this route\n                acts like a catch-all for URLs that we don't have explicit\n                routes for. */}\n          <Route path=\"*\" element={<NoMatch />} />\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n\nfunction Layout() {\n  return (\n    <div>\n      {/* A \"layout route\" is a good place to put markup you want to\n          share across all the pages on your site, like navigation. */}\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"about\">About</Link>\n          </li>\n          \n        </ul>\n      </nav>\n\n      <hr />\n\n      {/* An <Outlet> renders whatever child route is currently active,\n          so you can think about this <Outlet> as a placeholder for\n          the child routes we defined above. */}\n      <Outlet />\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}